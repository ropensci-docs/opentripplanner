[{"path":"https://docs.ropensci.org/opentripplanner/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/Analyst.html","id":"analyst-features","dir":"Articles","previous_headings":"","what":"Analyst Features","title":"Analyst","text":"Analyst adds following features OTP: PointSets - efficient way specify batch fromPlace / toPlaces routing. Surfaces - efficient way get travel time one many places. Isochrones - alternative implementation Isochrone features.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/Analyst.html","id":"loading-otp-with-the-analyst","dir":"Articles","previous_headings":"","what":"Loading OTP with the Analyst","title":"Analyst","text":"analyst optional feature OTP 1.x can loaded otp_setup. can see analyst working web UI. OTP Web Interface Analyst Mode","code":"# Get OTP and the Demo Data in the normal way library(opentripplanner) path_data <- file.path(tempdir(), \"OTP\") dir.create(path_data) path_otp <- otp_dl_jar(version = \"1.5.0\") #Must use OTP 1.x otp_dl_demo(path_data) log1 <- otp_build_graph(otp = path_otp, dir = path_data)  # Setup OTP with the analyst and pointsets enabled log2 <- otp_setup(otp = path_otp, dir = path_data, analyst = TRUE, pointsets = TRUE) otpcon <- otp_connect(timezone = \"Europe/London\")"},{"path":"https://docs.ropensci.org/opentripplanner/articles/Analyst.html","id":"creating-a-pointset","dir":"Articles","previous_headings":"","what":"Creating a Pointset","title":"Analyst","text":"noticed started OTP also enabled Pointsets feature. Pointsets .csv files latitude/longitude coordinates OTP can route . PointSets can created SF objects using otp_poinset() function. use LSOA points Advanced Features Vignette create PointSet. also add column data called jobs analyse. numerical values PointSet OTP can provide count sum value based travel criteria. case might want know many jobs can accessed within 30 minute drive given location. otp_pointset() function takes lsoa object creates PointSet can accessed OTP using name “lsoa”.","code":"download.file(\"https://github.com/ropensci/opentripplanner/releases/download/0.1/centroids.gpkg\",               \"centroids.gpkg\", mode = \"wb\") lsoa <- sf::st_read(\"centroids.gpkg\", stringsAsFactors = FALSE) lsoa$jobs <- sample(100:500, nrow(lsoa)) otp_pointset(lsoa, \"lsoa\", path_data)"},{"path":"https://docs.ropensci.org/opentripplanner/articles/Analyst.html","id":"creating-a-surface","dir":"Articles","previous_headings":"","what":"Creating a Surface","title":"Analyst","text":"surface evaluates travel times given point locations within 120 minutes one minute increments. quite similar isochrone. fist step make surface given location using otp_make_surface otp_make_surface function returns list containing surface ID parameters used create surface. can use object functions support surfaces. surface made can evaluate travel times pointset. otp_surface function returns list two objects. first object data data frame summarising sum count values pointset one minute increments fromPlace specified surfaceid object. second object times vector travel times seconds locations pointset. NA values returned OTP unable find route point point 120 minutes fromPlace. using sum count features can specify get_data = FALSE get just travel times. can visualise travel times using tmap package. Travel times LSOA points Notice locations OTP failed find travel time. likely point far road network route, mode allow access (e.g. driving pedestrianised road). try modifying point locations slightly allow OTP find valid route.","code":"surfaceid <- otp_make_surface(otpcon, c(-1.17502, 50.64590)) ttimes <- otp_surface(otpcon, surfaceid, \"lsoa\") ttimes <- otp_surface(otpcon, surfaceid, \"lsoa\", get_data = FALSE) lsoa$time <- ttimes[[1]]$times / 60 library(tmap) tmap_mode(\"view\") tm_shape(lsoa) +   tm_dots(col = \"time\")"},{"path":"https://docs.ropensci.org/opentripplanner/articles/Analyst.html","id":"producing-a-travel-time-matrix","dir":"Articles","previous_headings":"","what":"Producing a travel time matrix","title":"Analyst","text":"can use surfaces efficient way produce travel time matrix using otp_plan. special function otp_traveltime creates batches surfaces pointsets summarises results travel time matrix. function return travel times seconds fromPlaces toPlaces data frame. columns names fromID row names toID. failed routes return NA, greater 120 minutes.","code":"ttmatrix <- otp_traveltime(otpcon,                             path_data,                             fromPlace = lsoa,                            toPlace = lsoa,                            fromID = lsoa$geo_code,                            toID = lsoa$geo_code)"},{"path":"https://docs.ropensci.org/opentripplanner/articles/Analyst.html","id":"producing-an-isochrone-from-a-surface","dir":"Articles","previous_headings":"","what":"Producing an isochrone from a surface","title":"Analyst","text":"surfaces can also used produce isochrones surface. one raster can produced time. provide list surfaces first used. function otp_surface_isochrone returns raster image value travel time minutes. can view raster using raster package. Isochone Raster","code":"isochone <- otp_surface_isochrone(otpcon, surfaceid) library(terra) plot(isochone)"},{"path":"https://docs.ropensci.org/opentripplanner/articles/OTPv2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"OpenTripPlanner Version 2","text":"opentripplanner package originally developed support OpenTripPlanner v1.3, updated support subsequent release. OpenTripPlanner v2.0 next major release, vignette document changes within package support OpenTripPlanner v2.0. changes v2.0 improvements , like removal isochrone feature . package continue support version 1.5 (last v1.x) subsequent v2.x releases. vignette updated help users select best version needs. Note OpenTripPlanner undergoing significant changes moment features added removed. avoid constant updates R package currently targeting support v1.5 v2.2. versions may work officially supported.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/OTPv2.html","id":"major-changes-from-v1-5","dir":"Articles","previous_headings":"","what":"Major Changes from v1.5","title":"OpenTripPlanner Version 2","text":"Switch Java 8 Java 11/17 Support Netex transit data Support SIRI transit data Switch * routing algorithm Range Raptor searching transit routes Removal Isochrone, Geocode, analysis features","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/OTPv2.html","id":"correct-version-of-java","dir":"Articles","previous_headings":"","what":"Correct version of Java","title":"OpenTripPlanner Version 2","text":"Different versions OpenTripPlanner require different version Java OTP 1.x - Java 8 OTP 2.0 & 2.1 - Java 11 OTP 2.2 - Java 17 possible install multiple version Java computer: Download Links Java 8 Java 11 Java 17 multiple version Java installed also need change PATH variable point correct version Java. can check current default version Java terminal using","code":"java -version"},{"path":"https://docs.ropensci.org/opentripplanner/articles/OTPv2.html","id":"checking-your-java-version","dir":"Articles","previous_headings":"","what":"Checking your Java version","title":"OpenTripPlanner Version 2","text":"can check version Java accessible R using otp_check_java specifying version OTP want use. example wanted use OTP 2.0 Java 8 installed see:","code":"otp_check_java(2) [1] FALSE Warning message: In otp_check_java(2) : You have OTP 2.0 or 2.1 but the version of Java for OTP 1.x"},{"path":"https://docs.ropensci.org/opentripplanner/articles/OTPv2.html","id":"building-a-graph-and-starting-up-otp-2-2","dir":"Articles","previous_headings":"","what":"Building a graph and starting up OTP 2.2","title":"OpenTripPlanner Version 2","text":"can select OTP 2.2 using otp_dl_jar function. can download demo data build graph usual way.","code":"library(opentripplanner) # Path to a folder containing the OTP.jar file, change to where you saved the file. path_data <- file.path(tempdir(), \"OTP\") dir.create(path_data) path_otp <- otp_dl_jar(version = \"2.2.0\") otp_dl_demo(path_data) # Build Graph and start OTP log1 <- otp_build_graph(otp = path_otp, dir = path_data) log2 <- otp_setup(otp = path_otp, dir = path_data) otpcon <- otp_connect(timezone = \"Europe/London\")"},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Advanced Features","text":"vignette introduces advanced features OTP gives examples types analysis possible using OTP R together.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"recap","dir":"Articles","previous_headings":"Introduction","what":"Recap","title":"Advanced Features","text":"vignette, use data Getting Started vignette vignette. yet created example graph can set following commands. using non-default settings see Getting Started vignette full details.","code":"library(opentripplanner) # Path to a folder containing the OTP.jar file, change to where you saved the file. path_data <- file.path(tempdir(), \"OTP\") dir.create(path_data) path_otp <- otp_dl_jar() otp_dl_demo(path_data) # Build Graph and start OTP log1 <- otp_build_graph(otp = path_otp, dir = path_data) log2 <- otp_setup(otp = path_otp, dir = path_data) otpcon <- otp_connect(timezone = \"Europe/London\")"},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"batch-routing","dir":"Articles","previous_headings":"","what":"Batch Routing","title":"Advanced Features","text":"otp_plan() function can produce multiple routes . example, gather data travel times LSOAs Isle White Ryde Ferry. otp_plan() accepts three types input fromPlace toPlace: numeric longitude/latitude pair; 2 x m matrix row longitude/latitude pair; SF data.frame POINTS. number fromPlace toPlace must equal one (case otp_plan() repeat single location match length longer locations. ’ll start importing locations LSOA points. define destination Ryde Ferry: Now can use otp_plan() find routes may get warning messages returned OTP unable find routes. otp_plan() skip errors return routes can get. print messages console. also noticed handy progress bar. can plot routes using tmap package. plot routes look something like : Driving Routes Ryde Ferry","code":"download.file(\"https://github.com/ropensci/opentripplanner/releases/download/0.1/centroids.gpkg\", \"centroids.gpkg\", mode = \"wb\") lsoa <- sf::st_read(\"centroids.gpkg\", stringsAsFactors = FALSE) head(lsoa) toPlace <- c(-1.159494,50.732429) routes <- otp_plan(otpcon = otpcon,                     fromPlace = lsoa,                     toPlace = toPlace)"},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"all-to-all-routing","dir":"Articles","previous_headings":"Batch Routing","what":"All to All routing","title":"Advanced Features","text":"sometimes useful find route every possible origin destination example producing Origin-Destination (OD) matrix. wished route every LSOA every LSOA point can easily done repeating points. Warning routing points point increases total number routes calculate exponentially. case, 89 points results 89 x 89 = 7921 routes, large datasets take . OD matrix, may interested total travel time require route geometry. setting get_geometry = FALSE otp_plan() R just return meta-data discard geometry. slightly faster using get_geometry = TRUE uses less memory. example make travel time matrix: Notice use fromID toID allows otp_plan return LSOA geo_code routes. can useful producing many routes. IDs provided otp_plan return latitude/longitude fromPlace toPlace.","code":"toPlace   = lsoa[rep(seq(1, nrow(lsoa)), times = nrow(lsoa)),] fromPlace = lsoa[rep(seq(1, nrow(lsoa)), each  = nrow(lsoa)),] routes <- otp_plan(otpcon = otpcon,                    fromPlace = fromPlace,                    toPlace = toPlace,                    fromID = fromPlace$geo_code,                    toID = toPlace$geo_code,                    get_geometry = FALSE,                    distance_balance = TRUE) routes <- routes[,c(\"fromPlace\",\"toPlace\",\"duration\")] # Use the tidyr package to go from long to wide format routes_matrix <- tidyr::pivot_wider(routes,                                 names_from = \"toPlace\",                                 values_from = \"duration\")"},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"multicore-support","dir":"Articles","previous_headings":"Batch Routing","what":"Multicore Support","title":"Advanced Features","text":"OTP supports multicore routing box. based one core per route, suited finding large number routes. otp_plan() function argument ncores can changed positive integer enable multicore processing e.g. ncores = 4. recommended maximum value ncores one less 1.25x number cores system. allows one core left operating system tasks. graph demonstrates reduction time taken route LSOA pairs Isle Wight demo, using one six cores. Multicore performance improvements","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"distance-balancing","dir":"Articles","previous_headings":"Batch Routing","what":"Distance Balancing","title":"Advanced Features","text":"using multicore routing otp_plan can optionally set distance_balance = TRUE. Distance Balancing sorts routes decreasing euclidean distance sending OTP route. results efficient load balancing cores thus small reduction routing time (around five percent). original order inputs lost fromID toID must specified use distance balancing.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"elevation-profiles","dir":"Articles","previous_headings":"","what":"Elevation Profiles","title":"Advanced Features","text":"walking cycling routes hilliness route matters. elevation data available OTP return elevation profile route. default, OTP returns elevation separately XY coordinates, convenience otp_plan() argument get_elevation matches Z coordinates XY coordinates. may result minor misalignments. demonstrate , let’s get walking route. Notice use full_elevation = TRUE return raw elevation profile OTP. can view raw profile. data.frame 3 columns, first distance along leg route, second elevation, distance calculated otp_plan() cumulative distance along whole route. version 0.3.0.0 get_elevation argument otp_plan set FALSE default, speeds routing returning XY coordinates rather XYZ coordinates. Elevation profile raw data get elevation profile XYZ coordinates little complicated. sf::st_coordinates function returns matrix XYZ coordinates make line. geodist package provides quick way calculate lengths metres lng/lat points. Elevation profile XZY coordinates Notice less detail XYZ graph Z coordinates matched change XY coordinates, .e. check elevation turn road.","code":"route <- otp_plan(otpcon = otpcon,                     fromPlace = c(-1.18968, 50.60096),                     toPlace = c(-1.19105, 50.60439),                     mode = \"WALK\",                     get_elevation = TRUE,                     full_elevation = TRUE) profile_raw <- route$leg_elevation[[1]] plot(profile_raw$distance, profile_raw$second, type = \"p\",      xlab = \"distance along route\", ylab = \"elevation\") profile_xyz <- sf::st_coordinates(route) dists <- geodist::geodist(profile_xyz[,c(\"X\",\"Y\")], sequential = TRUE) dists <- cumsum(dists) plot(dists, profile_xyz[2:nrow(profile_xyz),\"Z\"], type = \"p\",      xlab = \"distance along route\", ylab = \"elevation\")"},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"isochrones","dir":"Articles","previous_headings":"","what":"Isochrones","title":"Advanced Features","text":"Isochrones lines equal time. Suppose interested visualising long takes access Ryde ferry using public transport different parts island. requesting isochrones OTP 15, 30, 45, 60, 75 90 minutes. can achieved single function otp_isochrone(). can visualise isochrones map using tmap package. see map like . Isochrones Ryde ferry","code":"ferry_current  <- otp_isochrone(otpcon = otpcon,             fromPlace = c(-1.159494, 50.732429), # lng/lat of Ryde ferry             mode = c(\"WALK\",\"TRANSIT\"),             maxWalkDistance = 2000,             date_time = as.POSIXct(strptime(\"2018-06-03 13:30\", \"%Y-%m-%d %H:%M\")),             cutoffSec = c(15, 30, 45, 60, 75, 90) * 60 ) # Cut offs in seconds ferry_current$minutes = ferry_current$time / 60 # Convert back to minutes library(tmap)                       # Load the tmap package tmap_mode(\"view\")                   # Set tmap to interative viewing map <- tm_shape(ferry_current) +  # Build the map   tm_fill(\"minutes\",           breaks = c(0, 15.01, 30.01, 45.01, 60.01, 75.01, 90.01),           style = \"fixed\",           palette = \"-RdYlBu\") +   tm_borders() map                                 # Plot the map"},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"geo-coding","dir":"Articles","previous_headings":"","what":"Geo-coding","title":"Advanced Features","text":"OTP built geo-coder allow search places names.","code":"stations <- otp_geocode(otpcon = otpcon, query = \"station\") head(stations)"},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"debug-layers","dir":"Articles","previous_headings":"","what":"Debug Layers","title":"Advanced Features","text":"troubleshooting routing issues, can visualise traversal permissions street edges, bike safety edges, transit stops linked streets. additional debug layers available, add ?debug_layers=true URL, like : http://localhost:8080?debug_layers=true. extra layers listed layer stack menu. can read different debug layers official OTP documentation.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"analyst","dir":"Articles","previous_headings":"","what":"Analyst","title":"Advanced Features","text":"Older versions OTP limited analytical features built-needed enabled graph build startup. features accessible via analyst = TRUE arguments otp_build_graph() otp_setup(). information see OTP documentation","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"configuring-opentripplanner","dir":"Articles","previous_headings":"","what":"Configuring OpenTripPlanner","title":"Advanced Features","text":"OTP works can configured using JSON files. build-config.json used graph building (.e. otp_build_graph()). router-config.json used setup (.e. otp_setup()). files must saved rest data router can unique configuration. help configure OTP several useful functions. otp_make_config() makes default config object fills default values. simply named list, can easily modify values. otp_validate_config() basic checks config object make sure valid. Finally otp_write_config() exports config object properly formatted JSON file. simple example changing default walking speed. much information configuring OpenTripPlanner https://opentripplanner.readthedocs.io/en/latest/Configuration/","code":"router_config <- otp_make_config(\"router\")     # Make a config object router_config$routingDefaults$walkSpeed        # Currently 1.34 m/s router_config$routingDefaults$walkSpeed <- 1.5 # Increase the walking speed otp_validate_config(router_config)             # Check the new config is valid otp_write_config(router_config,                # Save the config file                  dir = path_data,                  router = \"default\")"},{"path":"https://docs.ropensci.org/opentripplanner/articles/advanced_features.html","id":"running-an-otp-instance-in-docker","dir":"Articles","previous_headings":"","what":"Running an OTP instance in Docker","title":"Advanced Features","text":"able run OTP version 1.5.0 https://repo1.maven.org/maven2/org/opentripplanner/otp/ Dockerfile query via package. Create directory called docker-otp cd docker-opt Copy two lines file called otp Make sure executable: chmod +x otp Create Dockerfile. basic Dockerfile looks like: can build image using default Docker build command like docker build -t <name> . course “.” working directory Dockerfile . just running instance like: course let us place graphs docker volume $PWD/graphs. slightly edited version work described .","code":"#!/bin/sh  exec java $JAVA_OPTIONS -jar /usr/local/share/java/otp.jar $@ FROM java:8-alpine  ENV OTP_VERSION=1.5.0 ENV JAVA_OPTIONS=-Xmx1G  ADD https://repo1.maven.org/maven2/org/opentripplanner/otp/$OTP_VERSION/otp-$OTP_VERSION-shaded.jar /usr/local/share/java/otp.jar  COPY otp /usr/local/bin/  EXPOSE 8080  ENTRYPOINT [\"otp\"] CMD [\"--help\"] docker run \\   -p 8080:8080 \\   -v $PWD/graphs:/var/otp/graphs \\   -e JAVA_OPTIONS=-Xmx4G \\   <name_in_build> --server --autoScan --verbose"},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"opentripplanner","dir":"Articles","previous_headings":"Getting help and reporting bugs","what":"OpenTripPlanner","title":"Known Issues","text":"OTP Users Group OTP GitHub Issues","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"opentripplanner-for-r","dir":"Articles","previous_headings":"Getting help and reporting bugs","what":"OpenTripPlanner for R","title":"Known Issues","text":"OTP GitHub Issues","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"reasons-for-graph-building-to-fail","dir":"Articles","previous_headings":"","what":"Reasons for Graph building to Fail","title":"Known Issues","text":"otp_build_graph() function returns log OTP, reasons failures documented log. Common problems include.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"cant-allocate-memory","dir":"Articles","previous_headings":"Reasons for Graph building to Fail","what":"Can’t allocate memory","title":"Known Issues","text":"get error: Invalid maximum heap size: specified size exceeds maximum representable size. memory argument otp_build_graph() large. may set amount RAM computer 32 bit version Java rather 64 Bit version installed.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"ran-out-of-memory","dir":"Articles","previous_headings":"Reasons for Graph building to Fail","what":"Ran out of memory","title":"Known Issues","text":"graph build can fail due lack memory. can increase memory allocated using memory argument otp_build_graph().","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"bad-input-data","dir":"Articles","previous_headings":"Reasons for Graph building to Fail","what":"Bad input data","title":"Known Issues","text":"multiple input files (e.g. GTFS timetables, elevation, config files) graph build failing, try removing PBF file seeing graph can now successfully build. , add files one time find file causing build fail.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"reasons-for-routing-to-fail","dir":"Articles","previous_headings":"","what":"Reasons for Routing to Fail","title":"Known Issues","text":"find OTP can find route common reasons check:","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"start-or-end-is-too-far-from-the-road-network","dir":"Articles","previous_headings":"Reasons for Routing to Fail","what":"Start or End is too far from the road network","title":"Known Issues","text":"OTP snap fromPlace toPlace coordinates road network, limited distance. points far road network (e.g. lake middle park) OTP fail find route.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"mode-specific-limits","dir":"Articles","previous_headings":"Reasons for Routing to Fail","what":"Mode Specific Limits","title":"Known Issues","text":"OTP support mode combinations (e.g. walk + drive) places may accessible certain modes. example, can’t walk motorway drive path. Use debug layers check mode restrictions.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"maximum-walk-to-transit","dir":"Articles","previous_headings":"Reasons for Routing to Fail","what":"Maximum walk to transit","title":"Known Issues","text":"default, OTP caps maximum walking distance transit stop low level, areas unreachable transit. Increase maximum walking distance get better results.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"driving-on-roads-with-cycleway-tag","dir":"Articles","previous_headings":"Reasons for Routing to Fail","what":"Driving on Roads with cycleway tag","title":"Known Issues","text":"known bug stops driving road cycling infrastructure. https://groups.google.com/forum/#!topic/opentripplanner-users/BOv1J32k6Sc","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"multicore-instability","dir":"Articles","previous_headings":"Reasons for Routing to Fail","what":"Multicore instability","title":"Known Issues","text":"get error: Error unserialize(socklist[[n]]) : error reading connection means one parallel workers crashed. Try running routing smaller batches like : code break routing 5 batches put results list called routes_list binding together finished routes data frame.","code":"routes_list <- list() n <- split(1:nrow(fromPlace), cut(1:nrow(fromPlace), 5))  for(i in 1:5){   vals <- n[[i]]   routes_sub <- otp_plan(otpcon,                         fromPlace = fromPlace[vals,],                         toPlace = toPlace[vals,])   routes_list[[i]] <- routes_sub }  routes <- dplyr::bind_rows(routes_list)"},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"speeding-up-routing","dir":"Articles","previous_headings":"","what":"Speeding up routing","title":"Known Issues","text":"large amount routing consider following options. Use multicore routing using ncores argument otp_plan() Reduce area, example, routing one city don’t need whole country graph. Remove unneeded roads using osmfilter OSMtools example interested driving can remove footpaths cycleways. simplify graph provide small performance boost. Upgrading computer, new fast CPU cores route faster.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"gtfs-data-for-the-uk","dir":"Articles","previous_headings":"","what":"GTFS Data for the UK","title":"Known Issues","text":"See https://github.com/ITSLeeds/UK2GTFS","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/known_issues.html","id":"elevation-data","dir":"Articles","previous_headings":"","what":"Elevation Data","title":"Known Issues","text":"common GeoTIFF data value often maximum possible value. OTP can misinterpret elevation value. set data values elevation data something plausible like 0. Note OTP support types GeoTIFF compression may change compression type image experiencing problems.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"opentripplanner: getting started","text":"vignette introduction OpenTripPlanner (OTP) - open-source cross-platform multi-modal route planner written Java. uses imported OpenStreetMap (OSM) data routing street path network supports multi-agency public transport routing imported General Transit Feed Specification (GTFS) feeds. can also apply digital elevation model OSM street network, allowing, example, cycle-friendly routes requested. OTP web front-end can used end-users sophisticated routing API. OTP works worldwide long OSM map coverage area. Support transit timetables elevation calculations dependant available data. information getting data see getting data OTP section. significant advantage running multi-modal route planner ability carry analysis using amended transport data. Services Google Maps TransportAPI based current public transport schedules existing road network. OTP enables modify transit schedules /make changes underlying street network. editing local copy OSM, can model effects opening new roads, closing roads imposing restrictions. can also look back time. example, might want examine effect reductions rural bus services accessibility health facilities. , need network bus schedules previous years.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"opentripplanner: getting started","text":"need installed R, RStudio, Java 8. details required software, see prerequisites vignette included package.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"opentripplanner: getting started","text":"Install stable version package CRAN follows: can install development version GitHub using remotes package:","code":"install.packages(\"opentripplanner\") # Install Package library(opentripplanner)            # Load Package remotes::install_github(\"ropensci/opentripplanner\") # Install Package library(opentripplanner)                            # Load Package"},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"downloading-otp-and-the-demonstration-data","dir":"Articles","previous_headings":"","what":"Downloading OTP and the demonstration data","title":"opentripplanner: getting started","text":"build example graph Isle Wight using example data provided package. graph OTP uses find routes, must built raw data provided. Please note demo data modified teaching purposes used analysis.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"creating-a-folder-to-store-otp-and-its-data","dir":"Articles","previous_headings":"Downloading OTP and the demonstration data","what":"Creating a folder to store OTP and its data","title":"opentripplanner: getting started","text":"OTP expects data stored specific structure, see building otp graph details. make folder called OTP temporary directory. may wish change keep files closing R. Otherwise need download files build graph every time. example:","code":"path_data <- file.path(tempdir(), \"OTP\") dir.create(path_data) path_data <- file.path(\"C:/Users/Public\", \"OTP\") dir.create(path_data)"},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"downloading-otp","dir":"Articles","previous_headings":"Downloading OTP and the demonstration data","what":"Downloading OTP","title":"opentripplanner: getting started","text":"version 0.3 otp_dl_jar function download cache OTP jar file. can simply get path OTP JAR file like : otp_dl_jar first check internal cache JAR file download unavailable. wish specify location JAR file saved (version 0.2) use:","code":"path_otp <- otp_dl_jar() path_otp <- otp_dl_jar(path_data, cache = FALSE)"},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"downloading-example-data","dir":"Articles","previous_headings":"Downloading OTP and the demonstration data","what":"Downloading Example Data","title":"opentripplanner: getting started","text":"otp_dl_demo function downloads demonstration data puts correct structure.","code":"otp_dl_demo(path_data)"},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"building-an-otp-graph","dir":"Articles","previous_headings":"","what":"Building an OTP Graph","title":"opentripplanner: getting started","text":"Now can build graph. code create new file Graph.obj saved location defined path_data. default, R assign OTP 2GB memory build graph. larger areas, may need memory. can use memory argument set memory allocation MB. example, allocate 10GB, use: Note allocate memory RAM, use 32 Bit Java allocate 3GB. possible run OTP just 1GB memory small areas (including demo dataset).","code":"log1 <- otp_build_graph(otp = path_otp, dir = path_data) log1 <- otp_build_graph(otp = path_otp, dir = path_data, memory = 10240)"},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"launch-otp-and-load-the-graph","dir":"Articles","previous_headings":"","what":"Launch OTP and load the graph","title":"opentripplanner: getting started","text":"next step start OTP server, running router called ‘default’. OTP load graph created memory, able plan multi-modal routes using web interface. Run following command: OTP built-web server called Grizzly runs port 8080 (http) 8081 (https). another application running computer uses ports need specify alternative ports using port securePort options, example: take minute two OTP load graph start Grizzly server. worked, see message: OTP ready use, R open web browser OTP. can also access web interface using URL: http://localhost:8080. can now zoom Isle Wight area request route setting origin destination directly map (right-clicking mouse). can specify travel dates, times modes using ‘Trip Options’ window (see Figure). can change background map layer stack icon top right. OTP Web Interface Note: web interface work correctly Internet Explorer - use Firefox Chrome.","code":"log2 <- otp_setup(otp = path_otp, dir = path_data) log2 <- otp_setup(otp = path_otp, dir = path_data, port = 8801, securePort = 8802)"},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"connecting-to-the-otp-from-r","dir":"Articles","previous_headings":"","what":"Connecting to the OTP from R","title":"opentripplanner: getting started","text":"Now OTP running computer can let R connect OTP. otp_connect() creates OTP connection object allow R connect OTP. default, local timezone used, UK, need specify UK timezone get correct results demo data. connection created tested, message returned, saying connection exists . used default settings, different port can specify settings otp_connect(). can also use otp_connect() function make connection OTP remote server. server uses non-standard structure API, can provide full URL directly otp_connect(). See otp_connect() help details.","code":"otpcon <- otp_connect(timezone = \"Europe/London\") otpcon <- otp_connect(hostname =  \"localhost\",                       router = \"default\",                       port = 8801) otpcon <- otp_connect(url = \"https://api.digitransit.fi/routing/v1/routers/hsl\")"},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"getting-a-route-from-the-otp","dir":"Articles","previous_headings":"","what":"Getting a route from the OTP","title":"opentripplanner: getting started","text":"Now can use R get route OTP. OTP accepts pairs longitude/latitude coordinates fromPlace (start journey) toPlace (end journey). tmap package installed, can view route using.","code":"route <- otp_plan(otpcon,                    fromPlace = c(-1.17502, 50.64590),                    toPlace = c(-1.15339, 50.72266)) # install.packages(\"tmap\") # Only needed if you don't have tmap library(tmap)              # Load the tmap package tmap_mode(\"view\")          # Set tmap to interactive viewing qtm(route)                 # Plot the route on a map"},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"stopping-the-otp","dir":"Articles","previous_headings":"","what":"Stopping the OTP","title":"opentripplanner: getting started","text":"OTP running Java, continue run close R. can stop OTP running using command. NOTE: stop running JAVA applications! Congratulations, now multi-modal router planner!","code":"otp_stop()"},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"building-your-own-otp-graph","dir":"Articles","previous_headings":"","what":"Building your own OTP Graph","title":"opentripplanner: getting started","text":"want build graph different location, follow steps, change path_data variable folder data. OTP graph specifies every location region covered travel , compiled OTP using OSM data street path network (used walking, bicycle, drive modes) GTFS data transit scheduling. first task create folder file structure expected OTP. base directory called otp contains sub-directory called graphs. Directories created graphs known OTP routers contain files required build graph. single OTP instance can host several routers, example, covering different regions. basic file structure shown . router-config.json read OTP server started, build-config.json read graph building stage. information config files, see advanced features vignette.","code":"/ otp                         # Your top folder for storing all OTP data   /graphs                           /default                 # Subfolder with the name of the router          osm.pbf              # Required OSM road map          router-config.json   # Optional config file          build-config.json    # Optional config file          gtfs.zip             # Optional GTFS data          dem.tif              # Optional Elevation data"},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"multiple-routers","dir":"Articles","previous_headings":"Building your own OTP Graph","what":"Multiple Routers","title":"opentripplanner: getting started","text":"OTP supports multiple routes separate folders. example: multiple routers may useful support different regions, different scenarios, e.g. past, present, future. router requires graph via otp_build_graph() one version OTP jar files needed (.e. otp_dl_jar()) route must started via otp_setup() use. technically possible run multiple routers simultaneously, recommended performance reasons.","code":"/ otp                        # Your top folder for storing all OTP data   /graphs                           /london                 # router called london          osm.pbf             # map of London      /manchester             # router called manchester          osm.pbf             # map of Manchester"},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"getting-data-for-otp","dir":"Articles","previous_headings":"Building your own OTP Graph","what":"Getting Data for OTP","title":"opentripplanner: getting started","text":"use OTP local computer, need data location interest, roads , public transport timetable etc.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"road-map-data","dir":"Articles","previous_headings":"Building your own OTP Graph > Getting Data for OTP","what":"Road Map Data","title":"opentripplanner: getting started","text":"OTP uses road maps Open Street Map (OSM) .osm .pbf format. OSM free map anybody can edit. can download part OSM Geofabrik. Note OTP really needs road network OSM, Geofabrik downloads include non-road data buildings, parks, water etc. large areas, may wish remove unneeded data file building graph. can using osmconvert osmfilter. command-line utilities editing large OSM files documented OSM Wiki. small areas (e.g. city scale) necessary.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"public-transport-timetables","dir":"Articles","previous_headings":"Building your own OTP Graph > Getting Data for OTP","what":"Public Transport Timetables","title":"opentripplanner: getting started","text":"OTP can use public transport timetable data GTFS format. can find GTFS data many regions transitland. users UK see UK2GTFS","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/opentripplanner.html","id":"elevation-data","dir":"Articles","previous_headings":"Building your own OTP Graph > Getting Data for OTP","what":"Elevation Data","title":"opentripplanner: getting started","text":"can add terrain information routes, especially useful walking cycling, using GeoTIFF images. can find worldwide elevation data NASA. Warning common GeoTIFF data value often maximum possible value. OTP can misinterpret elevation value. set data values elevation data something plausible like 0. Note OTP support types GeoTIFF compression may change compression type image experiencing problems.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/prerequisites.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Prerequisites","text":"vignette provides guidance people new OpenTripPlanner (OTP) R. R OTP installed become familiar (e.g. reading vignette), recommend working Getting Started vignette.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/prerequisites.html","id":"why-would-i-want-to-use-opentripplanner-for-r","dir":"Articles","previous_headings":"Introduction","what":"Why would I want to use OpenTripPlanner for R?","title":"Prerequisites","text":"OpenTripPlanner (OTP) free, open-source, cross-platform multi-modal route planner written Java. like private version Google Maps. OTP can used run public route-finding services https://ride.trimet.org can also run computer server. want analyse transport networks OTP useful tool. However, OTP , name suggests, Trip Planner, analytical software. , OTP can find fastest route B find places within 20-minute walk C, answer question like “many people live within 10-minutes park?” R can help. R can process multiple spatial datasets population densities park locations built-journey planner. package allows use trip planning power OTP analytical might R.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/prerequisites.html","id":"what-is-this-package-for-and-what-is-a-package-anyway","dir":"Articles","previous_headings":"","what":"What is this package for, and what is a package anyway?","title":"Prerequisites","text":"opentripplanner R package makes easier R OpenTripPlanner communicate. Specifically, allows use R control OTP use local routing service. local versus remote routing services, see Transportation chapter Geocomputation R.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/prerequisites.html","id":"what-are-r-and-rstudio","dir":"Articles","previous_headings":"What is this package for, and what is a package anyway?","what":"What are R and RStudio?","title":"Prerequisites","text":"R open-source programming language free software environment statistical computing graphics. R many capabilities analysing data writing software, context, ability produce analyse spatial data maps relevant. RStudio Integrated Development Environment (IDE) R free personal use.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/prerequisites.html","id":"what-is-an-r-package","dir":"Articles","previous_headings":"What is this package for, and what is a package anyway?","what":"What is an R package?","title":"Prerequisites","text":"R package small piece software extends basic capabilities R. bit like new phone can things box (make phone calls, send email) install apps add extra abilities.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/prerequisites.html","id":"help-with-r","dir":"Articles","previous_headings":"What is this package for, and what is a package anyway?","what":"Help with R","title":"Prerequisites","text":"get started R, see Introduction R within R running help.start(), introductory tutorials DataCamp’s free Introduction R course, R tutor website. Geocomputation R book covers packages skills required analyse spatial datasets produced OpenTripPlanner. video tutorial installing R RStudio Mac Windows","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/prerequisites.html","id":"what-do-i-need-to-get-started","dir":"Articles","previous_headings":"","what":"What do I need to get started?","title":"Prerequisites","text":"need modern computer install software use OTP R local computer.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/prerequisites.html","id":"hardware","dir":"Articles","previous_headings":"What do I need to get started?","what":"Hardware","title":"Prerequisites","text":"Running trip planner computationally expensive best results modern desktop computer. package comes demonstration data Isle Wight, small area run modern laptops desktops. Recommended Hardware Modern CPU (2010 later) 64 Bit Operating System (Windows/Mac/Linux) 8+ GB RAM 64 GB+ Hard Disk Minimum Hardware 32 Bit Operating System (Windows/Mac/Linux) 2 GB RAM OTP requires least 1 GB space run demonstration dataset, default request 2 GB. low-end machines, necessary change default memory allocations minimise memory use programmes. larger areas OTP need memory. approximate guide memory use : 2 GB - Small Town / Region 4 GB - Large Town / City 8 GB - Region / Large City 20 GB - Country 50 GB - Continent OTP optimised city-scale routing performance degrade larger areas, although OTP used successfully several small European Countries e.g. Netherlands. Note use 32 Bit version Java maximum amount memory can used OTP 4 GB.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/prerequisites.html","id":"software","dir":"Articles","previous_headings":"What do I need to get started?","what":"Software","title":"Prerequisites","text":"OpenTripPlanner R package requires: R - download R selecting country (nearest available country) RStudio - download free version personal use. RStudio essential strongly recommended. Java Note version Java need depends version OTP want use.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/articles/prerequisites.html","id":"the-correct-version-of-java-for-otp","dir":"Articles","previous_headings":"What do I need to get started? > Software","what":"The correct version of Java for OTP","title":"Prerequisites","text":"Different versions OTP require different version Java OTP v1.5 - Java 8 - Recommended beginners OTP v2.0 & v2.1 - Java 11 OTP v2.2 - Java 17 Use OTP v1.5 default package recommended beginners stable full featured. Future updates package add support OTP v2.2+. possible 64 Bit version Java preferable, especially want use OTP large areas. package includes simple function checking correct version Java otp_check_java(). get Java: Windows/Mac https://www.java.com/en/download/ link defaults 32 Bit version, also check https://java.com/en/download/manual.jsp. Linux recommend instructions StackOverflow. Debian based Linux including Ubuntu Linux Mint, following commands terminal install correct version.","code":"sudo apt install openjdk-8-jdk"},{"path":"https://docs.ropensci.org/opentripplanner/articles/prerequisites.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Prerequisites","text":"Now installed Java R go Getting Started vignette, find install package, create graph, use plan trips.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Malcolm Morgan. Author, maintainer. Marcus Young. Author. Robin Lovelace. Author. Layik Hama. Contributor.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan et al., (2019). OpenTripPlanner R. Journal Open Source Software, 4(44), 1926, https://doi.org/10.21105/joss.01926","code":"@Article{,   title = {OpenTripPlanner for R},   author = {{Malcolm Morgan} and {Marcus Young} and {Robin Lovelace} and {Layik Hama}},   journal = {Journal of Open Source Software},   year = {2019},   volume = {4},   number = {44},   pages = {1926},   doi = {10.21105/joss.01926}, }"},{"path":"https://docs.ropensci.org/opentripplanner/index.html","id":"opentripplanner-for-r-","dir":"","previous_headings":"","what":"Setup and connect to OpenTripPlanner","title":"Setup and connect to OpenTripPlanner","text":"opentripplanner R package provides simple yet flexible interface OpenTripPlanner (OTP). OTP multimodal trip planning service written Java. information OTP , see prerequisites vignette. opentripplanner can used interface remote instance OTP (e.g. website) help set manage local version OTP private use. Basic setup routing functions outlined getting started vignette, advanced functionality batch routing, isochrones, customised setup described advanced features vignette.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/index.html","id":"whats-new","dir":"","previous_headings":"","what":"What’s New","title":"Setup and connect to OpenTripPlanner","text":"newest version package 0.5.0 (Jan 2023) focuses increased routing speeds (3-4x faster) expanding support OTP v2.2. new version also drops legacy support R 3.6, now requires R 4.0 later. See news details.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/index.html","id":"opentripplanner","dir":"","previous_headings":"Installation","what":"OpenTripPlanner","title":"Setup and connect to OpenTripPlanner","text":"use OpenTripPlanner local computer need install Java 8 download latest version OTP. Instructions installing Java setting OTP can found prerequisites vignette.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/index.html","id":"r-package","dir":"","previous_headings":"Installation","what":"R Package","title":"Setup and connect to OpenTripPlanner","text":"install stable CRAN version: Install development version using remotes:","code":"install.packages(\"opentripplanner\") # Install Package library(opentripplanner)            # Load Package # If you do not already have the remotes package install.packages(\"remotes\") # Install the package from GitHub remotes::install_github(\"ropensci/opentripplanner\") # Load the package library(opentripplanner)"},{"path":"https://docs.ropensci.org/opentripplanner/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Setup and connect to OpenTripPlanner","text":"package contains three groups functions: Functions setting local instance OTP: otp_dl_jar() download OTP Jar file; otp_dl_demo() download demo data Isle Wight; otp_check_java() check correct version Java; otp_build_graph() make OTP graph raw data; otp_setup() start local instance OTP; otp_make_config() make config object; otp_validate_config() validate config object; otp_write_config() save config object json file. Functions connecting local remote instance OTP: otp_connect() connect OTP. Functions retrieving data OTP: otp_plan() get routes B; otp_geocode() get locations named places e.g. road names (OTP 1.x ); otp_isochrone() get isochrone maps (OTP 1.x ); otp_make_surface() make analyst surface (OTP 1.x ); otp_surface() evaluate analyst surface (OTP 1.x ); otp_traveltime() make travel time matrix (OTP 1.x ); otp_surface_isochrone() make raster isochrone map (OTP 1.x ); Results returned sf objects.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Setup and connect to OpenTripPlanner","text":"package built tutorial Marcus Young.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Setup and connect to OpenTripPlanner","text":"Please note opentripplanner project released Contributor Code Conduct. contributing project, agree abide terms. Bug reports comments welcome Github Issues code submissions Pull Requests.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Setup and connect to OpenTripPlanner","text":"Please cite JOSS paper publications: Morgan et al., (2019). OpenTripPlanner R. Journal Open Source Software, 4(44), 1926, https://doi.org/10.21105/joss.01926","code":""},{"path":"https://docs.ropensci.org/opentripplanner/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"opentripplanner provides functions enable multi-modal routing R. provides interface OpenTripPlanner (OTP) Java routing service, allows calculation routes large transport networks, locally via calls remote server. package contains three groups functions : (1) setting managing local instance OTP; (2) connecting OTP locally remotely; (3) sending requests OTP API importing results converting appropriate classes analysis.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/paper.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Summary","text":"Routing, process calculating paths points geographic space follow transport network, fundamental part transport planning vital solving many real-world transport problems. outputs routing service, can calculate many routes large area, comprises coordinates data representing movement way ‘optimal’, based range criteria (user understand able change). Routing services, one provided Google Maps, well-known increasingly vital component personal travel planning many people [@bast_fast_2010]. Less well-known, perhaps equally important, routing services also key understanding aggregate travel patterns guiding policy commercial decisions [@giusti_new_2018]. meet need route planning capabilities, wide range proprietary open source tools created.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/paper.html","id":"functionality","dir":"","previous_headings":"","what":"Functionality","title":"Summary","text":"OpenTripPlanner (OTP) written Java designed work Open Street Map (OSM) data road-based modes (Car, Bike, Walking) General Transit Feed Specification (GTFS) data public transit (Bus, Train, Metro). OTP unusual among open source routing tools ability account wide range modes travel, e.g. bicycle hire, support complex multi-stage multi-modal journeys park ride. However, OTP’s primary purpose support public-facing websites TriMet; thus analytical capabilities limited. Conversely, R language well suited statistical spatial analysis route planning capabilities. OpenTripPlanner R package aims bridge gap OTP R supplying simple ways R connect OTP either local machine remote server, via OTP’s API. package designed ease bulk routing allowing input multiple origins destinations two column matrices longitude-latitude pairs. package also supports multi-core operation take advantage OTP’s multicore functionality. Results returned widely used sf data frame format. Although performance dependant size map routed , typically can achieve 10 routes per second per core. package developed set R functions formed part intermediate-level OTP tutorial part research Centre Research Energy Demand Solutions Institute Transport Studies.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/paper.html","id":"reproducible-demonstration","dir":"","previous_headings":"","what":"Reproducible demonstration","title":"Summary","text":"Example data Isle Wight, UK provided package. example uses data demonstrate basic functionality package. full explanation provided package vignettes First, download demo data OTP. Second, build OTP graph, start OTP server connect server Finally, find routes","code":"library(opentripplanner)                 # Load Package path_data <- file.path(tempdir(), \"OTP\") # Create folder for data dir.create(path_data) path_otp <- otp_dl_jar(path_data)        # Download OTP otp_dl_demo(path_data)                   # Download demo data log <- otp_build_graph(otp = path_otp,     # Build Graph                        dir = path_data) otp_setup(otp = path_otp, dir = path_data) # Start OTP otpcon <- otp_connect()                    # Connect R to OTP route <- otp_plan(otpcon,                   fromPlace = c(-1.17502, 50.64590),                   toPlace = c(-1.15339, 50.72266))"},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/json_example_drive.html","id":null,"dir":"Reference","previous_headings":"","what":"Example JSON for driving — json_example_drive","title":"Example JSON for driving — json_example_drive","text":"Example JSON response OTP used internal testing use","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/json_example_drive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example JSON for driving — json_example_drive","text":"","code":"json_example_drive"},{"path":"https://docs.ropensci.org/opentripplanner/reference/json_example_drive.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example JSON for driving — json_example_drive","text":"json","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/json_example_long_drive.html","id":null,"dir":"Reference","previous_headings":"","what":"Example JSON for driving long distance — json_example_long_drive","title":"Example JSON for driving long distance — json_example_long_drive","text":"Example JSON response OTP used internal testing use","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/json_example_long_drive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example JSON for driving long distance — json_example_long_drive","text":"","code":"json_example_long_drive"},{"path":"https://docs.ropensci.org/opentripplanner/reference/json_example_long_drive.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example JSON for driving long distance — json_example_long_drive","text":"json","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/json_example_transit.html","id":null,"dir":"Reference","previous_headings":"","what":"Example JSON for transit — json_example_transit","title":"Example JSON for transit — json_example_transit","text":"Example JSON response OTP used internal testing use","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/json_example_transit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example JSON for transit — json_example_transit","text":"","code":"json_example_transit"},{"path":"https://docs.ropensci.org/opentripplanner/reference/json_example_transit.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example JSON for transit — json_example_transit","text":"json","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/opentripplanner-package.html","id":null,"dir":"Reference","previous_headings":"","what":"OpenTripPlanner of R — opentripplanner-package","title":"OpenTripPlanner of R — opentripplanner-package","text":"goal OpenTripPlanner R provide simple R interface OpenTripPlanner (OTP). OTP multimodal trip planning service.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/opentripplanner-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"OpenTripPlanner of R — opentripplanner-package","text":"Maintainer: Malcolm Morgan m.morgan1@leeds.ac.uk (ORCID) Authors: Marcus Young M..Young@soton.ac.uk (ORCID) Robin Lovelace rob00x@gmail.com (ORCID) contributors: Layik Hama layik.hama@gmail.com (ORCID) [contributor]","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_build_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Build an OTP Graph — otp_build_graph","title":"Build an OTP Graph — otp_build_graph","text":"OTP run Java requires Java commands typed   command line. function allows parameters defined R   automatically passed Java. function builds OTP graph   Open Street Map files.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_build_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build an OTP Graph — otp_build_graph","text":"","code":"otp_build_graph(   otp = NULL,   dir = NULL,   memory = 2048,   router = \"default\",   flag64bit = TRUE,   quiet = TRUE,   otp_version = NULL )"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_build_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build an OTP Graph — otp_build_graph","text":"otp character string, path OTP .jar file dir character string, path directory containing necessary files, see details memory positive integer. Amount memory assign OTP MB, default 2048 router character string name router, must subfolder  dir/graphs, default \"default\". See vignettes details. flag64bit Logical, true -d64 flag added Java instructions, ignored otp_version >= 2 quiet Logical, FALSE Java commands printed console otp_version Numeric, version OTP build, default NULL version auto-detected","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_build_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build an OTP Graph — otp_build_graph","text":"Character vector messages produced OTP, return   message \"Graph built\" successful","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_build_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build an OTP Graph — otp_build_graph","text":"OTP .jar file can downloaded   https://repo1.maven.org/maven2/org/opentripplanner/otp/ build OTP graph requires following files directory   specified dir variable. /graphs - sub-directory /default - sub-directory name OTP router used router'   variable osm.pbf - Required, pbf file containing Open Street Map router-config.json - Required, json file containing configurations settings   OTP gtfs.zip - Optional, number GTFS files transit timetables terrain.tif - Optional, GeoTiff image terrain map function accept file name .jar file, must   .jar file directory OTP can support multiple routers (e.g.   different regions), router must sub-directory   graphs directory","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_build_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build an OTP Graph — otp_build_graph","text":"","code":"if (FALSE) { log <- otp_build_graph(otp = \"C:/otp/otp.jar\", dir = \"C:/data\") }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_check_java.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Java version — otp_check_java","title":"Check Java version — otp_check_java","text":"Check correct version Java running OTP locally","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_check_java.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Java version — otp_check_java","text":"","code":"otp_check_java(otp_version = 1.5)"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_check_java.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Java version — otp_check_java","text":"otp_version numeric, OTP version number default 1.5","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_check_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the what version of OTP the server is running — otp_check_version","title":"Check the what version of OTP the server is running — otp_check_version","text":"Check version OTP server running","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_check_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the what version of OTP the server is running — otp_check_version","text":"","code":"otp_check_version(otpcon, warn = TRUE)"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_check_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the what version of OTP the server is running — otp_check_version","text":"otpcon otpcon object otp_connect() warn logical, TRUE check OTP version matches contents otpcon","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up and confirm a connection to an OTP instance. — otp_connect","title":"Set up and confirm a connection to an OTP instance. — otp_connect","text":"Defines parameters required connect router OTP instance , required, confirms instance router query-able.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up and confirm a connection to an OTP instance. — otp_connect","text":"","code":"otp_connect(   hostname = \"localhost\",   router = \"default\",   url = NULL,   port = 8080,   ssl = FALSE,   check = TRUE,   timezone = Sys.timezone(),   otp_version = 1.5 )"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up and confirm a connection to an OTP instance. — otp_connect","text":"hostname string, e.g. \"ec2-34-217-73-26.us-west-2.compute.amazonaws.com\". Optional, default \"localhost\". router string, e.g. \"UK2018\". Optional, default \"default\". OTP can support multiple routers see advanced vignette details. url non-standard URL structure used provide full url, default NULL port positive integer. Optional, default 8080. ssl Logical, indicates whether use https. Optional, default FALSE. check Logical. TRUE connection object returned OTP instance router confirmed reachable. Optional, default TRUE. timezone Character, timezone, defaults local timezone otp_version Numeric, OTP Version use default 1.5, check TRUE `otp_check_version()` called otp_version updated","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up and confirm a connection to an OTP instance. — otp_connect","text":"Returns S3 object class otpconnect. check TRUE   router reachable object returned.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_connect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up and confirm a connection to an OTP instance. — otp_connect","text":"default URL structure OTP API : http://<hostname>:<port>/otp/routers/<router> example: http://localhost:8080/otp/routers/default Functions construct URL parameters provided otpconnect objects. However websites hosting OTP modified default URL structure. case can use url parameter bypass URL construction provide fully formed URL. case hostname, router, port, ssl ignored.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up and confirm a connection to an OTP instance. — otp_connect","text":"","code":"if (FALSE) { otpcon <- otp_connect() otpcon <- otp_connect(   router = \"UK2018\",   ssl = TRUE ) otpcon <- otp_connect(   hostname = \"ec2.us-west-2.compute.amazonaws.com\",   router = \"UK2018\",   port = 8888,   ssl = TRUE ) otpcon <- otp_connect(   url = \"https://api.digitransit.fi:443/routing/v1/routers/hsl\" ) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_dl_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Demo Data — otp_dl_demo","title":"Download Demo Data — otp_dl_demo","text":"Download demonstration data Isle Wight","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_dl_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Demo Data — otp_dl_demo","text":"","code":"otp_dl_demo(   path_data = NULL,   url = paste0(\"https://github.com/ropensci/opentripplanner/\",     \"releases/download/0.1/isle-of-wight-demo.zip\"),   quiet = FALSE )"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_dl_demo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Demo Data — otp_dl_demo","text":"path_data path folder data OTP stored url URL data quiet logical, passed download.file, default FALSE","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_dl_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Demo Data — otp_dl_demo","text":"","code":"if (FALSE) { otp_dl_demo(tempdir()) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_dl_jar.html","id":null,"dir":"Reference","previous_headings":"","what":"Download OTP Jar File — otp_dl_jar","title":"Download OTP Jar File — otp_dl_jar","text":"Download OTP jar file maven.org","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_dl_jar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download OTP Jar File — otp_dl_jar","text":"","code":"otp_dl_jar(   path = NULL,   version = \"1.5.0\",   file_name = paste0(\"otp-\", version, \"-shaded.jar\"),   url = \"https://repo1.maven.org/maven2/org/opentripplanner/otp\",   quiet = FALSE,   cache = TRUE )"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_dl_jar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download OTP Jar File — otp_dl_jar","text":"path path folder OTP stored version character string version number default \"1.5.0\" file_name file name give otp default \"otp.jar\" url URL download server quiet logical, passed download.file, default FALSE cache logical, default TRUE, see details","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_dl_jar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download OTP Jar File — otp_dl_jar","text":"path OTP file","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_dl_jar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download OTP Jar File — otp_dl_jar","text":"version 0.3.0.0 `otp_dl_jar` cache JAR file within package ignore `path` argument. can force new download saved `path` location setting `cache = FALSE`.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_dl_jar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download OTP Jar File — otp_dl_jar","text":"","code":"if (FALSE) { otp_dl_jar(tempdir()) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_geocode.html","id":null,"dir":"Reference","previous_headings":"","what":"Use OTP Geo-coder to find a location — otp_geocode","title":"Use OTP Geo-coder to find a location — otp_geocode","text":"Geo-coding converts named place, street name      lng/lat pair.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use OTP Geo-coder to find a location — otp_geocode","text":"","code":"otp_geocode(   otpcon = NULL,   query = NULL,   autocomplete = FALSE,   stops = TRUE,   clusters = FALSE,   corners = TRUE,   type = \"SF\" )"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use OTP Geo-coder to find a location — otp_geocode","text":"otpcon OTP connection object produced otp_connect() query Character, query string want geocode autocomplete logical Whether use query string prefix match, default FALSE stops Logical, Search stops, either name stop code, default TRUE clusters Logical, Search clusters name, default FALSE corners Logical, Search street corners using least one street names, default TRUE type Character, results returned can \"SF\" \"Coordinates\" \"\", Default \"SF\"","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_geocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use OTP Geo-coder to find a location — otp_geocode","text":"Returns data.frame SF POINTS Coordinates     locations match `query`","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_geocode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use OTP Geo-coder to find a location — otp_geocode","text":"OTP return maximum 10 results","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_geocode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use OTP Geo-coder to find a location — otp_geocode","text":"","code":"if (FALSE) { locations <- otp_geocode(otpcon, \"High Street\") }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_isochrone.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Isochrones from a location — otp_isochrone","title":"Get the Isochrones from a location — otp_isochrone","text":"Get Isochrones location","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_isochrone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Isochrones from a location — otp_isochrone","text":"","code":"otp_isochrone(   otpcon = NA,   fromPlace = NA,   fromID = NULL,   mode = \"CAR\",   date_time = Sys.time(),   arriveBy = FALSE,   maxWalkDistance = 1000,   routingOptions = NULL,   cutoffSec = c(600, 1200, 1800, 2400, 3000, 3600),   ncores = max(round(parallel::detectCores() * 1.25) - 1, 1),   timezone = otpcon$timezone )"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_isochrone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Isochrones from a location — otp_isochrone","text":"otpcon OTP connection object produced otp_connect() fromPlace Numeric vector, Longitude/Latitude pair,     e.g. `c(-0.134649,51.529258)`, 2 column matrix Longitude/Latitude pairs, sf     data frame POINTS fromID character vector length fromPlace mode character vector one modes travel valid values TRANSIT, WALK, BICYCLE, CAR, BUS, RAIL, SUBWAY, TRAM, FERRY, BICYCLE_RENT, BICYCLE_PARK, CAR_PARK, CABLE_CAR, GONDOLA, FUNICULAR, AIRPLANE, default CAR. combinations valid e.g. c(\"WALK\",\"BUS\") valid c(\"WALK\",\"CAR\") . date_time POSIXct, date time, defaults current date time arriveBy Logical, Whether trip depart arrive specified date time, default FALSE maxWalkDistance maximum distance walk metres routingOptions named list passed OTP see `otp_routing_options()` cutoffSec Numeric vector, number seconds define break points Isochrone ncores number cores use parallel processing timezone character, timezone use, default otpcon","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_isochrone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Isochrones from a location — otp_isochrone","text":"Returns SF data.frame POLYGONs","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_isochrone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the Isochrones from a location — otp_isochrone","text":"Isochrones maps equal travel time, given location map produced showing long takes reach location. Isochrones available OTP v1.x work v2.0","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_isochrone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Isochrones from a location — otp_isochrone","text":"","code":"if (FALSE) { isochrone1 <- otp_isochrone(otpcon, fromPlace = c(-0.1346, 51.5292)) isochrone2 <- otp_isochrone(otpcon,   fromPlace = c(-0.1346, 51.5292),   mode = c(\"WALK\", \"TRANSIT\"), cutoffSec = c(600, 1200, 1800) ) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_make_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Config Object — otp_make_config","title":"Make Config Object — otp_make_config","text":"OTP can configured using three json files `otp-config.json`, `build-config.json`, `router-config.json`. function creates named list config file populates defaults values.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_make_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Config Object — otp_make_config","text":"","code":"otp_make_config(type, version = 1)"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_make_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Config Object — otp_make_config","text":"type type config file create, \"otp\", \"build\", \"router\" version version OPT e.g. 1 2","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_make_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make Config Object — otp_make_config","text":"details see: http://docs.opentripplanner.org/en/latest/Configuration","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_make_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Config Object — otp_make_config","text":"","code":"{   conf <- otp_make_config(\"build\")   conf <- otp_make_config(\"router\") }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_make_surface.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Surface — otp_make_surface","title":"Make a Surface — otp_make_surface","text":"Requires OTP 1.x analyst","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_make_surface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Surface — otp_make_surface","text":"","code":"otp_make_surface(   otpcon = NULL,   fromPlace = c(-1.17502, 50.6459),   mode = \"CAR\",   date_time = Sys.time(),   maxWalkDistance = 1000,   arriveBy = FALSE,   routeOptions = NULL,   timezone = otpcon$timezone,   ncores = 1 )"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_make_surface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Surface — otp_make_surface","text":"otpcon OTP connection object produced otp_connect() fromPlace Numeric vector, Longitude/Latitude pair, e.g. `c(-0.134649,51.529258)`, 2 column matrix Longitude/Latitude pairs, sf data frame POINTS CRS 4326 mode character vector one modes travel valid values TRANSIT, WALK, BICYCLE, CAR, BUS, RAIL, SUBWAY, TRAM, FERRY, default CAR. combinations valid e.g. c(\"WALK\",\"BUS\") valid c(\"WALK\",\"CAR\") . date_time POSIXct, date time, defaults current date time maxWalkDistance Numeric passed OTP metres arriveBy Logical, Whether trip depart arrive specified date time, default FALSE routeOptions Named list values passed OTP use timezone Character, timezone use, see .POSIXct, default local timezone ncores many cores use default = 1","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_make_surface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Surface — otp_make_surface","text":"Returns list information surface created","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_make_surface.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a Surface — otp_make_surface","text":"function requires analysis pointset features   enabled `otp_setup()`. Thus work OTP 1.x.   detail see analyst vignette.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_make_surface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a Surface — otp_make_surface","text":"","code":"if (FALSE) { surface <- otp_make_surface(otpcon, c(-1.17502, 50.64590)) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Get get a route or routes from the OTP — otp_plan","title":"Get get a route or routes from the OTP — otp_plan","text":"main routing function OTP can find single   multiple routes `fromPlace` `toPlace`.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get get a route or routes from the OTP — otp_plan","text":"","code":"otp_plan(   otpcon = NA,   fromPlace = NA,   toPlace = NA,   fromID = NULL,   toID = NULL,   mode = \"CAR\",   date_time = Sys.time(),   arriveBy = FALSE,   maxWalkDistance = 1000,   numItineraries = 3,   routeOptions = NULL,   full_elevation = FALSE,   get_geometry = TRUE,   ncores = max(round(parallel::detectCores() * 1.25) - 1, 1),   timezone = otpcon$timezone,   distance_balance = FALSE,   get_elevation = FALSE )"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get get a route or routes from the OTP — otp_plan","text":"otpcon OTP connection object produced otp_connect() fromPlace Numeric vector, Longitude/Latitude pair, e.g. `c(-0.134649,51.529258)`, 2 column matrix Longitude/Latitude pairs, sf data frame POINTS CRS 4326 toPlace Numeric vector, Longitude/Latitude pair, e.g. `c(-0.088780,51.506383)`, 2 column matrix Longitude/Latitude pairs, sf data frame POINTS CRS 4326 fromID character vector length fromPlace toID character vector length toPlace mode character vector one modes travel valid values TRANSIT, WALK, BICYCLE, CAR, BUS, RAIL, SUBWAY, TRAM, FERRY, BICYCLE_RENT, BICYCLE_PARK, CAR_PARK, CABLE_CAR, GONDOLA, FUNICULAR, AIRPLANE, default CAR. combinations valid e.g. c(\"WALK\",\"BUS\") valid c(\"WALK\",\"CAR\") . date_time POSIXct, date time, defaults current date time arriveBy Logical, Whether trip depart arrive specified date time, default FALSE maxWalkDistance Numeric passed OTP meters numItineraries maximum number possible itineraries return routeOptions Named list values passed OTP use `otp_route_options()` make template object. full_elevation Logical, full elevation profile returned, default FALSE get_geometry Logical, route geometry returned, default TRUE, see details ncores Numeric, number cores use batch processing, default 1, see details timezone Character, timezone use, see .POSIXct, default local timezone distance_balance Logical, use distance balancing, default false, see details get_elevation Logical, default FALSE, true XYZ coordinates returned else XY coordinates returned.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get get a route or routes from the OTP — otp_plan","text":"Returns SF data frame LINESTRINGs","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get get a route or routes from the OTP — otp_plan","text":"function returns SF data.frame one row leg   journey (leg defined change mode). transit,   one route option may returned indicated `route_option`   column. number different itineraries can set   `numItineraries` variable. ## Batch Routing passing matrix SF data frame object fromPlace toPlace   `otp_plan` route batch mode. case `ncores` variable   used. Increasing `ncores` enable multicore routing, max   `ncores` 1.25 times number cores system.   default 1.25 timees -1 improved stability. ## Distance Balancing using multicore routing task take amount   time. can result wasted time batches. Distance Balancing   sorts routing euclidean distance fromPlace toPlace   routing. offers small performance improvement around five   percent. original order inputs lost fromID toID must   provided. ## Elevation OTP supports elevation data can return elevation profile   route available. OTP returns elevation profile separately   XY coordinates, means direct match number   XY points number Z points.  OTP also returns elevation   profile first leg route (appears bug).   `get_elevation` TRUE otp_plan function matches elevation profile   XY coordinates return SF linestring XYZ coordinates.   require detailed elevation profile, full_elevation parameter   return nested data.frame three columns. first second   returned OTP, distance cumulative distance along   route derived First. ## Route Geometry `get_geometry` provides option return route geometry,   just return meta-data (e.g. journey time). may useful   creating Origin:Destination matrix also provides small performance   boost reduced processing geometries.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get get a route or routes from the OTP — otp_plan","text":"","code":"if (FALSE) { otpcon <- otp_connect() otp_plan(otpcon, c(0.1, 55.3), c(0.6, 52.1)) otp_plan(otpcon, c(0.1, 55.3), c(0.6, 52.1),   mode = c(\"WALK\", \"TRANSIT\") ) otp_plan(otpcon, c(0.1, 55.3), c(0.6, 52.1),   mode = \"BICYCLE\", arriveBy = TRUE,   date_time = as.POSIXct(strptime(\"2018-06-03 13:30\", \"%Y-%m-%d %H:%M\")) ) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_pointset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pointset — otp_pointset","title":"Create a pointset — otp_pointset","text":"Pointsets text files tha can used Analyist feature OTP 1.5","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_pointset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pointset — otp_pointset","text":"","code":"otp_pointset(points = NULL, name = NULL, dir = NULL)"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_pointset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pointset — otp_pointset","text":"points sf data frame POINTS CRS 4326 name Character, name pointset dir character string, path directory containing necessary files, see details","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_pointset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a pointset — otp_pointset","text":"Returns data.frame SF POINTS Coordinates     locations match `query`","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_pointset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a pointset — otp_pointset","text":"OTP return maximum 10 results","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_pointset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a pointset — otp_pointset","text":"","code":"if (FALSE) { locations <- otp_geocode(otpcon, \"High Street\") }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_routing_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Make routingOptions object — otp_routing_options","title":"Make routingOptions object — otp_routing_options","text":"OTP supports wide selection routing options `otp_plan()` accepts named list options. function produces empty named list valid options supported package OTP.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_routing_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make routingOptions object — otp_routing_options","text":"","code":"otp_routing_options()"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_routing_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make routingOptions object — otp_routing_options","text":"Supports almost possible options OTP 1.4. Note popular option (mode, date, time, etc.) set directly `otp_plan()`. want permenaty set option many supported config files, see help `otp_make_config()`. http://dev.opentripplanner.org/apidoc/1.4.0/resource_PlannerResource.html","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_routing_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make routingOptions object — otp_routing_options","text":"","code":"if (FALSE) { routingOptions <- otp_routing_options() routingOptions$walkSpeed <- 1.5 routingOptions <- otp_validate_routing_options(routingOptions) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up an OTP instance. — otp_setup","title":"Set up an OTP instance. — otp_setup","text":"OTP run Java requires Java commands typed command line. function allows parameters defined R automatically passed Java. function sets local instance OTP, remote versions see documentation. function assumes run otp_build_graph()","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up an OTP instance. — otp_setup","text":"","code":"otp_setup(   otp = NULL,   dir = NULL,   memory = 2048,   router = \"default\",   port = 8080,   securePort = 8081,   analyst = FALSE,   pointsets = FALSE,   wait = TRUE,   flag64bit = TRUE,   quiet = TRUE,   otp_version = NULL,   open_browser = TRUE )"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up an OTP instance. — otp_setup","text":"otp character string, path OTP .jar file dir character string, path directory containing necessary files, see details memory positive integer. Amount memory assign OTP MB, default 2048 router character name router use, must subfolder dir/graphs, default \"default\". See vignettes details. port positive integer. Optional, default 8080. securePort positive integer. Optional, default 8081. analyst Logical. analyst features loaded? Default FALSE pointsets Logical. pointsets loaded? Default FALSE wait Logical, R wait OTP loaded running next line code, default TRUE flag64bit Logical, true -d64 flag added Java instructions, ignored otp_version >= 2 quiet Logical, FALSE Java commands printed console otp_version Numeric, version OTP build, default NULL version auto-detected open_browser Logical, TRUE web browser loaded OTP ready","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up an OTP instance. — otp_setup","text":"function return value R. wait TRUE R wait OTP running (maximum 5 minutes). 5 minutes (wait FALSE) function return R control, OTP keep loading.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_setup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up an OTP instance. — otp_setup","text":"run OTP graph must created using otp_build_graph following files directory specified dir variable. /graphs - sub-directory /default - sub-directory name OTP router used 'router' variable graph.obj  OTP graph","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_setup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up an OTP instance. — otp_setup","text":"","code":"if (FALSE) { otp_setup(   otp = \"C:/otp/otp.jar\",   dir = \"C:/data\" ) otp_setup(   otp = \"C:/otp/otp.jar\",   dir = \"C:/data\",   memory = 5000,   analyst = TRUE ) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_stop.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop and OTP Instance — otp_stop","title":"Stop and OTP Instance — otp_stop","text":"OTP run Java requires Java commands typed command line. function allows parameters defined R automatically passed Java. function stops already running OTP instance","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_stop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop and OTP Instance — otp_stop","text":"","code":"otp_stop(warn = TRUE, kill_all = TRUE)"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_stop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop and OTP Instance — otp_stop","text":"warn Logical, get warning message kill_all Logical, Java instances killed?","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_stop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop and OTP Instance — otp_stop","text":"function return message object","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_stop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stop and OTP Instance — otp_stop","text":"function assumes run otp_setup()","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_stop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop and OTP Instance — otp_stop","text":"","code":"if (FALSE) { otp_stop(kill_all = FALSE) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a surface against a pointset — otp_surface","title":"Evaluate a surface against a pointset — otp_surface","text":"Evaluate surface created `otp_make_surface` pointset made `otp_pointset` get travel times statitics analysit OTP 1.x","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a surface against a pointset — otp_surface","text":"","code":"otp_surface(   otpcon = NULL,   surface = NULL,   pointsset = NULL,   get_data = TRUE,   ncores = 1 )"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a surface against a pointset — otp_surface","text":"otpcon OTP connection object produced otp_connect() surface surface list otp_make_surface() pointsset character, name pointset get_data Logical, data returned just travel times. ncores Integer, number cores use","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a surface against a pointset — otp_surface","text":"Returns list data.frames travel times","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate a surface against a pointset — otp_surface","text":"function requires analysis pointset features   enabled `otp_setup()`. Thus work OTP 1.x.   detail see analyst vignette.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a surface against a pointset — otp_surface","text":"","code":"if (FALSE) { times <- otp_surface(otpcon, c(-1.17502, 50.64590), \"lsoa\", path_data) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface_isochrone.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an isochrone from a surface — otp_surface_isochrone","title":"Make an isochrone from a surface — otp_surface_isochrone","text":"Make raster image (picture) travel time using surface features OTP 1.x","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface_isochrone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an isochrone from a surface — otp_surface_isochrone","text":"","code":"otp_surface_isochrone(otpcon = NULL, surface = NULL)"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface_isochrone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an isochrone from a surface — otp_surface_isochrone","text":"otpcon OTP connection object produced otp_connect() surface suface list otp_make_surface()","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface_isochrone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an isochrone from a surface — otp_surface_isochrone","text":"Returns data.frame travel times","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface_isochrone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an isochrone from a surface — otp_surface_isochrone","text":"function requires analysis pointset features   enabled `otp_setup()`. Thus work OTP 1.x.   detail see analyst vignette.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_surface_isochrone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an isochrone from a surface — otp_surface_isochrone","text":"","code":"if (FALSE) { times <- otp_surface(otpcon, c(-1.17502, 50.64590), \"lsoa\", path_data) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_traveltime.html","id":null,"dir":"Reference","previous_headings":"","what":"Get travel times between points — otp_traveltime","title":"Get travel times between points — otp_traveltime","text":"function requires OTP 1.x analyst","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_traveltime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get travel times between points — otp_traveltime","text":"","code":"otp_traveltime(   otpcon = NA,   path_data = NULL,   fromPlace = NA,   toPlace = NA,   fromID = NULL,   toID = NULL,   mode = \"CAR\",   date_time = Sys.time(),   arriveBy = FALSE,   maxWalkDistance = 1000,   numItineraries = 3,   routeOptions = NULL,   ncores = max(round(parallel::detectCores() * 1.25) - 1, 1),   timezone = otpcon$timezone )"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_traveltime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get travel times between points — otp_traveltime","text":"otpcon OTP connection object produced otp_connect() path_data Path data used otp_build_graph() fromPlace Numeric vector, Longitude/Latitude pair, e.g. `c(-0.134649,51.529258)`, 2 column matrix Longitude/Latitude pairs, sf data frame POINTS CRS 4326 toPlace Numeric vector, Longitude/Latitude pair, e.g. `c(-0.088780,51.506383)`, 2 column matrix Longitude/Latitude pairs, sf data frame POINTS CRS 4326 fromID character vector length fromPlace toID character vector length toPlace mode character vector one modes travel valid values TRANSIT, WALK, BICYCLE, CAR, BUS, RAIL, default CAR. combinations valid e.g. c(\"WALK\",\"BUS\") valid c(\"WALK\",\"CAR\") . date_time POSIXct, date time, defaults current date time arriveBy Logical, Whether trip depart arrive specified date time, default FALSE maxWalkDistance Numeric passed OTP metres numItineraries maximum number possible itineraries return routeOptions Named list values passed OTP use `otp_route_options()` make template object. ncores Numeric, number cores use batch processing, default 1, see details timezone Character, timezone use, see .POSIXct, default local timezone","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_traveltime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get travel times between points — otp_traveltime","text":"Returns  data frame","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_traveltime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get travel times between points — otp_traveltime","text":"Make travel time matrix using analyst features OPT 1.x","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_validate_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Config Object — otp_validate_config","title":"Validate Config Object — otp_validate_config","text":"Checks list OTP configuration options valid","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_validate_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Config Object — otp_validate_config","text":"","code":"otp_validate_config(config, type = attributes(config)$config_type, version = 1)"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_validate_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Config Object — otp_validate_config","text":"config named list made/modified `otp_make_config()` type type config file version version OPT e.g. 1 2","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_validate_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Config Object — otp_validate_config","text":"Performs basic validity checks class, max/min values etc appropriate, complex parameters checked. details see: http://docs.opentripplanner.org/en/latest/Configuration http://dev.opentripplanner.org/javadoc/1.3.0/org/opentripplanner/routing/core/RoutingRequest.html","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_validate_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Config Object — otp_validate_config","text":"","code":"if (FALSE) { conf <- otp_make_config(\"build\") otp_validate_config(conf) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_validate_routing_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate routingOptions object — otp_validate_routing_options","title":"Validate routingOptions object — otp_validate_routing_options","text":"OTP supports wide selection routing options `otp_plan()` accepts named list options. function validates named list inputs removes empty inputs.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_validate_routing_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate routingOptions object — otp_validate_routing_options","text":"","code":"otp_validate_routing_options(opts)"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_validate_routing_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate routingOptions object — otp_validate_routing_options","text":"opts named list options possibly `otp_routing_options()`","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_validate_routing_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate routingOptions object — otp_validate_routing_options","text":"Supports almost possible options OTP 1.4. Note popular option (mode, date, time, etc.) set directly `otp_plan()`. want permenaty set option many supported config files, see help `otp_make_config()`. http://dev.opentripplanner.org/apidoc/1.4.0/resource_PlannerResource.html","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_validate_routing_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate routingOptions object — otp_validate_routing_options","text":"","code":"if (FALSE) { routingOptions <- otp_routing_options() routingOptions$walkSpeed <- 1.5 routingOptions <- otp_validate_routing_options(routingOptions) }"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_write_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Write config object as json file — otp_write_config","title":"Write config object as json file — otp_write_config","text":"Takes config list produced `otp_make_config()` saves json file OTP","code":""},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_write_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write config object as json file — otp_write_config","text":"","code":"otp_write_config(config, dir = NULL, router = \"default\")"},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_write_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write config object as json file — otp_write_config","text":"config named list made/modified `otp_make_config()` dir Path folder data OTP stored router name router, default \"default\", must subfolder dir/graphs","code":""},{"path":[]},{"path":"https://docs.ropensci.org/opentripplanner/reference/otp_write_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write config object as json file — otp_write_config","text":"","code":"if (FALSE) { conf <- otp_make_config(\"build\") otp_write_config(conf, dir = tempdir()) }"},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-052","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.5.2","title":"opentripplanner 0.5.2","text":"Fixed bug otp_isochrone using fromID Slightly faster routing large batches mode choices otp_plan","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-051","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.5.1","title":"opentripplanner 0.5.1","text":"CRAN release: 2023-02-02 Updated dependency purrr require >= 1.0.0 Fixed bug otp_plan using toID thanks @temporalista","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-050","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.5.0","title":"opentripplanner 0.5.0","text":"Version 0.5.0 significant rewrite package focusing substantially faster routing. package moved using multiple R workers requesting parsing results OTP two stage process. Stage 1 uses curl send asynchronous requests OTP. stage fast OTP, supports OTP’s limit 1.25x number cores. Stage 2 parses JSON converts form usable R. parsing currently uses single thread, optimised can now parse around 700-800 routes/second faster OTP around 40-50 routes/second/core. Overall new process 3-4 times faster v0.4.0 uses less memory. Future development may add mulitcore support parsing stage speed improvements. Breaking Changes surfaceID returned otp_make_surface now list lists allow multiple inputs/outputs removed legacy support old version R (<4.0) don’t support RcppSimdJson older versions R use version 0.2.3 columns returned otp_plan changed names. names now start “leg_” show leg specific variables e.g. “mode” become “leg_mode” Changes removed dependency raster rgdal replaced terra replaced multi-core routeing asynchronous requests using curl resulting faster routing lower resource usage remove pbapply dependency replaced progressr remove dependency lubridate default ncores argument changed 1 round(parallel::detectCores() * 1.25) - 1 Typos fixed documentation Support OTP 2.2 Java 17","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-040","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.4.0","title":"opentripplanner 0.4.0","text":"CRAN release: 2022-01-20 Fix broken moved URLs tibble moved imports suggests Support OTP 2.0 Support analyst features OTP 1.x new functions Support s2 features sf package","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-032","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.3.2","title":"opentripplanner 0.3.2","text":"Fix bug parsing fare data Fix bug latest version Java defaulting 32Bit even 64bit available. Added try() functions reduce risk crashes large scale batch routing Added flag64bit argument otp_build_graph() otp_setup() Added quiet argument otp_build_graph() Updated Known Issues Vignette reduce initial wait time otp_setup() 60 seconds 30 seconds switch OTP 1.5.0 default version otp_dl_jar()","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-031","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.3.1","title":"opentripplanner 0.3.1","text":"CRAN release: 2020-11-09 Limited support version R can’t install RcppSimdJson","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-030","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.3.0","title":"opentripplanner 0.3.0","text":"CRAN release: 2020-10-23 Note version makes minor changes results returned, example column order. changes due new json parser affect overall results may affect dependent code. Significant refactor code giving 50% reduction routing time replaced dplyr data.table replaced httr curl replaced many rjson functions RcppSimdJson equivalents replaced many sf functions sfheaders equivalents fixed bug otp_plan distance_balancing = TRUE fixed bug #69 otp_plan now return fromPlace toPlace first two columns otp_plan set get_elevation = FALSE default boosts performance Fixed bug distance_balancing gave sub-optimal balancing distance_balancing = TRUE zero distance routes found, OTP reject case, saves time impact results.","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-0230","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.2.3.0","title":"opentripplanner 0.2.3.0","text":"CRAN release: 2020-06-09 Added distance_balancing argument otp_plan gives small performance boost multicore routing Added get_elevation argument otp_plan default TRUE, FALSE returns XY coordinates rather XYZ coordinates gives 4% performance boost. Removed helper code dplyr::bind_rows longer required dplyr 1.0.0","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-0220","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.2.2.0","title":"opentripplanner 0.2.2.0","text":"CRAN release: 2020-06-06 Changes support dplyr 1.0.0, package now needs vctrs 0.3.1 Added timezone support otp_connect, otp_plan, otp_isochrone fixing issue #54, see docs details. Added quiet argument otp_dl_jar otp_dl_demo Fixed error advanced features vignette, issue #57 Switch dplyr data.table, issue #60","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-0210","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.2.1.0","title":"opentripplanner 0.2.1.0","text":"CRAN release: 2020-04-14 Batch isochrones support added Fix bug correct_distances() input length <= 2 distances never decrease Fix bug polyline2linestring() elevation length <= 2 New input argument otp_plan() otp_isochrone routingOptions allows support many routing options set. Arguments walkReluctance, transferPenalty, minTransferTime removed replaced routingOptions. New functions otp_routing_options(), otp_validate_routing_options(), otp_check_java() New data internal package checking Added support UK way property set (OTP 1.5)","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-0208","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.2.0.8","title":"opentripplanner 0.2.0.8","text":"CRAN release: 2020-02-06 Disabled CRAN tests fail solaris OS, due different wording error messages","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-0206","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.2.0.6","title":"opentripplanner 0.2.0.6","text":"Fixed bug routing fails due missing fare data","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-0204","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.2.0.4","title":"opentripplanner 0.2.0.4","text":"CRAN release: 2020-01-20 Added NEWS.md file track changes package. Fixed CRAN test error certain OS Added CRAN badges","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-0203","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.2.0.3","title":"opentripplanner 0.2.0.3","text":"CRAN release: 2020-01-19 First CRAN release","code":""},{"path":"https://docs.ropensci.org/opentripplanner/news/index.html","id":"opentripplanner-0200","dir":"Changelog","previous_headings":"","what":"opentripplanner 0.2.0.0","title":"opentripplanner 0.2.0.0","text":"Release peer-reviewed ROpenSci","code":""}]
